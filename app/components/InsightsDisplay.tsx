'use client';

interface InsightsDisplayProps {
  insights: string;
  entryCount: number;
}

export default function InsightsDisplay({ insights, entryCount }: InsightsDisplayProps) {
  const sections = insights.split(/\n(?=#{1,3} )/);

  return (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <div className="mb-6 pb-4 border-b-2 border-gray-200">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">
          Your Personal Insights
        </h2>
        <p className="text-gray-600">
          Based on analysis of {entryCount} diary {entryCount === 1 ? 'entry' : 'entries'}
        </p>
      </div>

      <div className="prose prose-lg max-w-none">
        {sections.map((section, index) => {
          const lines = section.trim().split('\n');
          const title = lines[0]?.replace(/^#{1,3}\s*/, '').replace(/\*\*/g, '');
          const content = lines.slice(1).join('\n').trim();

          if (!title && !content) return null;

          return (
            <div key={index} className="mb-6">
              {title && (
                <h3 className="text-xl font-bold text-indigo-900 mb-3 pb-2 border-b border-indigo-200">
                  {title}
                </h3>
              )}
              {content && (
                <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                  {formatContent(content)}
                </div>
              )}
            </div>
          );
        })}
      </div>

      <div className="mt-6 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
        <p className="text-sm text-indigo-900">
          <strong>Note:</strong> These insights are generated by AI based on your diary entries. 
          They are meant to help you reflect on patterns and themes in your writing.
        </p>
      </div>
    </div>
  );
}

function formatContent(text: string): React.ReactNode {
  const parts = text.split('\n');
  
  return parts.map((part, i) => {
    if (part.trim().startsWith('-') || part.trim().startsWith('•')) {
      return (
        <div key={i} className="ml-4 mb-2 flex items-start">
          <span className="text-indigo-600 mr-2">•</span>
          <span>{formatInlineText(part.trim().substring(1).trim())}</span>
        </div>
      );
    }
    
    if (/^\d+\./.test(part.trim())) {
      return (
        <div key={i} className="ml-4 mb-2">
          {formatInlineText(part.trim())}
        </div>
      );
    }

    if (part.trim()) {
      return (
        <p key={i} className="mb-3">
          {formatInlineText(part)}
        </p>
      );
    }

    return <br key={i} />;
  });
}

function formatInlineText(text: string): React.ReactNode {
  const parts = text.split(/(\*\*.*?\*\*)/g);
  
  return parts.map((part, i) => {
    if (part.startsWith('**') && part.endsWith('**')) {
      return (
        <strong key={i} className="font-bold text-gray-900">
          {part.slice(2, -2)}
        </strong>
      );
    }
    return <span key={i}>{part}</span>;
  });
}
