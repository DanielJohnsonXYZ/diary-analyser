'use client';

import ExportButton from './ExportButton';
import InsightsStats from './InsightsStats';

interface InsightsDisplayProps {
  insights: string;
  entryCount: number;
  entries: string[];
}

export default function InsightsDisplay({ insights, entryCount, entries }: InsightsDisplayProps) {
  const sections = insights.split(/\n(?=#{1,3} )/);

  return (
    <div className="bg-white rounded-2xl shadow-xl p-8 border border-gray-100">
      {/* Header */}
      <div className="mb-8 pb-6 border-b-2 border-gradient-to-r from-indigo-200 to-purple-200">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <span className="text-5xl">ðŸ§ </span>
            <h2 className="text-4xl font-extrabold bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
              Your Personal Insights
            </h2>
          </div>
          <ExportButton insights={insights} entries={entries} entryCount={entryCount} />
        </div>
        <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-full border border-indigo-200 mb-6">
          <span className="text-xl">ðŸ“Š</span>
          <p className="text-gray-700 font-semibold">
            Based on <span className="text-indigo-600 font-bold">{entryCount}</span> diary {entryCount === 1 ? 'entry' : 'entries'}
          </p>
        </div>

        {/* Stats */}
        <InsightsStats insights={insights} entryCount={entryCount} />
      </div>

      {/* Content */}
      <div className="space-y-6">
        {sections.map((section, index) => {
          const lines = section.trim().split('\n');
          const title = lines[0]?.replace(/^#{1,3}\s*/, '').replace(/\*\*/g, '');
          const content = lines.slice(1).join('\n').trim();

          if (!title && !content) return null;

          return (
            <div 
              key={index}
              className="p-6 bg-gradient-to-br from-indigo-50 to-purple-50 rounded-xl border-2 border-indigo-100 hover:border-indigo-300 hover:shadow-md transition-all duration-200"
            >
              {title && (
                <h3 className="text-2xl font-bold text-indigo-900 mb-4 flex items-center gap-2">
                  <span className="text-2xl">ðŸ’¡</span>
                  {title}
                </h3>
              )}
              {content && (
                <div className="text-gray-700 leading-relaxed text-base">
                  {formatContent(content)}
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Footer Note */}
      <div className="mt-8 p-6 bg-gradient-to-r from-indigo-50 via-purple-50 to-pink-50 rounded-xl border-2 border-indigo-200">
        <div className="flex items-start gap-3">
          <span className="text-2xl flex-shrink-0">ðŸ’«</span>
          <div>
            <p className="font-bold text-indigo-900 mb-2">About These Insights</p>
            <p className="text-gray-700 text-sm leading-relaxed">
              These insights are generated by Claude AI based on patterns discovered in your diary entries. 
              They're meant to help you reflect and gain new perspectives on your thoughts and experiences.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}

function formatContent(text: string): React.ReactNode {
  const parts = text.split('\n');
  
  return parts.map((part, i) => {
    if (part.trim().startsWith('-') || part.trim().startsWith('â€¢')) {
      return (
        <div key={i} className="flex items-start gap-3 mb-3">
          <span className="text-indigo-600 text-lg flex-shrink-0 mt-1">â€¢</span>
          <span className="flex-1">{formatInlineText(part.trim().substring(1).trim())}</span>
        </div>
      );
    }
    
    if (/^\d+\./.test(part.trim())) {
      return (
        <div key={i} className="flex items-start gap-3 mb-3">
          <span className="text-indigo-600 font-bold flex-shrink-0">{part.trim().match(/^\d+\./)?.[0]}</span>
          <span className="flex-1">{formatInlineText(part.trim().replace(/^\d+\.\s*/, ''))}</span>
        </div>
      );
    }

    if (part.trim()) {
      return (
        <p key={i} className="mb-4 leading-relaxed">
          {formatInlineText(part)}
        </p>
      );
    }

    return <br key={i} />;
  });
}

function formatInlineText(text: string): React.ReactNode {
  const parts = text.split(/(\*\*.*?\*\*)/g);
  
  return parts.map((part, i) => {
    if (part.startsWith('**') && part.endsWith('**')) {
      return (
        <strong key={i} className="font-bold text-gray-900 bg-indigo-100 px-1 rounded">
          {part.slice(2, -2)}
        </strong>
      );
    }
    return <span key={i}>{part}</span>;
  });
}
